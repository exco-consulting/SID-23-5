<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Figure SO.11 - Modeling Stand-Alone and Aggregate ServiceSpecifications</title>
<link href="../../../../../css/ea.css" rel="stylesheet" type="text/css" />
<script>
function initPage(src) {	
	if(parent==this&&(this.location+"").indexOf('EARoot')!=-1)
		document.location=(this.location+"").substring(0,(this.location+"").indexOf('EARoot'))+"index"+(this.location+"").substring((this.location+"").lastIndexOf('.'))+"?goto="+((this.location+"").substring((this.location+"").indexOf('EARoot')+7,(this.location+"").lastIndexOf('.')).replace(/\//g,':').replace(/EA/g,""));
	else
		parent.initPage(src);
}

function nameClassifier(name, separator)
{
  var str = name;
  var classifierName;
  var node = document.getElementById('name_classifier');
  if(node != null)
  {
    classifierName = node.innerHTML;
  }
  if(classifierName != "")
  {
   str += separator + classifierName;
  }
  
  return str;
}
</script>
</head>
<body onload="initPage(this);" class="Content">
<div class="PageBody">
	
<img src="EA1367.png" usemap="#EA1367" border="0" />

<MAP NAME="EA1367">
<area shape="rect" coords="692,129,852,159" href="./EA2/EA1440.htm" target="_self">
<area shape="rect" coords="764,264,996,294" href="./EA2/EA1442.htm" target="_self">
<area shape="rect" coords="166,125,352,155" href="./EA1/EA1416.htm" target="_self">
<area shape="rect" coords="26,264,259,294" href="./EA1/EA1418.htm" target="_self">
<area shape="rect" coords="514,264,730,294" href="./EA2/EA1441.htm" target="_self">
<area shape="rect" coords="274,264,487,294" href="./EA1/EA1417.htm" target="_self">
<area shape="rect" coords="477,10,608,40" href="EA1406.htm" target="_self">
</MAP>

	<div class="ObjectTitle">Figure SO.11 - Modeling Stand-Alone and Aggregate ServiceSpecifications diagram</div>
	<div class="ObjectDetailsNotes">There are two basic ways to define and use a ServiceSpecification. One is to define a stand-alone ServiceSpecification, while the other is to define an aggregate ServiceSpecification. The difference is straightforward &#8211; aggregate ServiceSpecifications are used to define collections of ServiceSpecifications, whereas stand-alone ServiceSpecifications define all the functionality that is needed by themselves.&lt;br/&gt;If we did this, then the ServiceSpecAtomic would be defined as an abstract base class for defining ServiceSpecifications that do not have any subordinate ServiceSpecifications. These ServiceSpecifications are stand-alone in definition and use, and don&#8217;t require any supporting ServiceSpecifications to define the common characteristics of Services that it serves as a template for.&lt;br/&gt;Similarly, a ServiceSpecComposite class would be defined as an abstract base class for defining ServiceSpecifications that are formed by aggregating other ServiceSpecifications. The types of ServiceSpecifications that are aggregated may be ServiceSpecAtomic and/or ServiceSpecComposite instances. A ServiceSpecComposite collectively defines all of the common characteristics of Services that it serves as a template for.&lt;br/&gt;However, we already have defined two subclasses of ServiceSpecification, called CustomerFacingService and ResourceFacingService. We can just as easily apply the composite pattern to these classes instead of defining a ServiceSpecAtomic and a ServiceSpecComposite class. This is exactly what is done in the model shown in the following Figure. We can reserve the right to define generic ServiceSpecAtomic and ServiceSpecComposite classes that are not CustomerFacingServices or ResourceFacingServices in the future. Note that at this time, no examples of such ServiceSpecifications exist. &lt;br/&gt;Therefore, we will proceed with the definition of CustomerFacingServiceSpecs and ResourceFacingServiceSpecs using the composite pattern to model this.&lt;br/&gt;</div>

	<table border="0" cellpadding="0" cellspacing="0" class="ObjectDetails">
		<tr>
			<td width="15%" class="ObjectDetailsTopic">Created:</td>
			<td width="85%" class="ObjectDetailsValue">3/28/2022 3:51:09 PM</td>
		</tr>
		<tr>
			<td width="15%" class="ObjectDetailsTopic">Modified:</td>
			<td width="85%" class="ObjectDetailsValue">10/28/2023 6:38:46 AM</td>
		</tr>
		<tr style="padding-top: 10px;">
			<td width="15%" class="ObjectDetailsTopic"><img src="../../../../../images/plus03.gif" align="absmiddle" id="proj" onclick="parent.toggleData(this.id)" />Project:</td>
			<td width="85%" class="ObjectDetailsValue"></td>			
		</tr>
		<tr id="proj00" style="display: none;">
			<td width="15%" class="ObjectDetailsTopic" style="padding-left: 18px;">Author:</td>
			<td width="85%" class="ObjectDetailsValue">Giu Platania</td>
		</tr>
		<tr id="proj01" style="display: none;">
			<td width="15%" class="ObjectDetailsTopic" style="padding-left: 18px;">Version:</td>
			<td width="85%" class="ObjectDetailsValue">1.0.0</td>
		</tr>
		<tr>
			<td width="15%" class="ObjectDetailsTopic"><img src="../../../../../images/plus03.gif" align="absmiddle" id="adv" onclick="parent.toggleData(this.id)" />Advanced:</td>
			<td width="85%" class="ObjectDetailsValue"></td>			
		</tr>
		<tr id="adv00" style="display: none;">
			<td width="15%" class="ObjectDetailsTopic" style="padding-left: 18px;">ID:</td>
			<td width="85%" class="ObjectDetailsValue">{46C5AC27-0F5D-4dac-858A-6E628C72AABA}</td>
		</tr>
	</table>

</div>
 
</body>
</html>